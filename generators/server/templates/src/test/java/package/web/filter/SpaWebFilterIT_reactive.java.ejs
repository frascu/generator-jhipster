package <%= packageName %>.web.filter;

import <%= packageName %>.IntegrationTest;
import <%= packageName %>.security.AuthoritiesConstants;
import org.springframework.http.HttpHeaders;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.security.test.context.support.WithMockUser;


@AutoConfigureWebTestClient(timeout = IntegrationTest.DEFAULT_TIMEOUT)
@WithMockUser
@IntegrationTest
public class SpaWebFilterIT {

    @Autowired
    private WebTestClient webTestClient;

    @Test
    void testFilterForwardsToIndex() throws Exception {
        webTestClient
            .get()
            .uri("/")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().valueEquals(HttpHeaders.LOCATION, "/index.html");
    }
<%_ if (!skipUserManagement) { _%>

    @Test
    void testFilterDoesNotForwardToIndexForApi() throws Exception {
        webTestClient
            .get()
            .uri("/api/<% if (!applicationTypeMicroservice) { %>authenticate<% } else { %>users<% } %>")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().doesNotExist(HttpHeaders.LOCATION);
    }
<%_ } _%>

    @Test
    @WithMockUser(authorities = AuthoritiesConstants.ADMIN)
    void testFilterDoesNotForwardToIndexForV3ApiDocs() throws Exception {
        webTestClient
            .get()
            .uri("/v3/api-docs")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().doesNotExist(HttpHeaders.LOCATION);
    }

    @Test
    void testFilterDoesNotForwardToIndexForDotFile() throws Exception {
        webTestClient
            .get()
            .uri("/file.js")
            .exchange()
            .expectStatus().isNotFound();
    }

    @Test
    void getBackendEndpoint() throws Exception {
        webTestClient
            .get()
            .uri("/test")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().valueEquals(HttpHeaders.LOCATION, "/index.html");
    }

    @Test
    void forwardUnmappedFirstLevelMapping() throws Exception {
        webTestClient
            .get()
            .uri("/first-level")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().valueEquals(HttpHeaders.LOCATION, "/index.html");
    }

    @Test
    void forwardUnmappedSecondLevelMapping() throws Exception {
        webTestClient
            .get()
            .uri("/first-level/second-level")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().valueEquals(HttpHeaders.LOCATION, "/index.html");
    }

    @Test
    void forwardUnmappedThirdLevelMapping() throws Exception {
        webTestClient
            .get()
            .uri("/first-level/second-level/third-level")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().valueEquals(HttpHeaders.LOCATION, "/index.html");
    }

    @Test
    void forwardUnmappedDeepMapping() throws Exception {
        webTestClient
            .get()
            .uri("/1/2/3/4/5/6/7/8/9/10")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().valueEquals(HttpHeaders.LOCATION, "/index.html");
    }

    @Test
    void getUnmappedFirstLevelFile() {
        webTestClient
            .get()
            .uri("/foo.js")
            .exchange()
            .expectStatus()
            .isNotFound();
    }

    /**
     * This test verifies that any files that aren't permitted by Spring Security will be forbidden.
     * If you want to change this to return isNotFound(), you need to add a request mapping that
     * allows this file in SecurityConfiguration.
     */
    @Test
    void getUnmappedSecondLevelFile() throws Exception {
        webTestClient
            .get()
            .uri("/foo/bar.js")
            .exchange()
            .expectStatus()
            .isForbidden();
    }

    @Test
    void getUnmappedThirdLevelFile() throws Exception {
        webTestClient
            .get()
            .uri("/foo/another/bar.js")
            .exchange()
            .expectStatus()
            .isForbidden();
    }
}
